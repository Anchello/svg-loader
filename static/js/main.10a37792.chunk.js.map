{"version":3,"sources":["components/constatns.tsx","components/linear-gradient/index.tsx","components/svg-loader/index.tsx","loader/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DIRECTION","LinearGradient","React","_ref","id","direction","x2","y2","react","x1","y1","concat","stopColor","stopOpacity","offset","SvgLoader","width","height","children","reverse","backColor","loaderColor","className","idMask","uuid","idGradient","classnames","viewBox","version","linear_gradient","svg-loader__cube--horizontal","svg-loader__cube--vertical","svg-loader__cube--reverse","fill","x","y","mask","defaultProps","Loader","memo","props","react_default","a","createElement","components_svg_loader","cx","cy","r","rx","ry","SIZE","App","loader","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.10a37792.chunk.js","sourcesContent":["type DIRECTION = {\n  horizontal: string;\n  vertical: string;\n}\n\nexport const DIRECTION: DIRECTION = {\n  horizontal: \"horizontal\",\n  vertical: \"vertical\"\n};\n","import * as React from \"react\";\nimport { DIRECTION } from \"../constatns\";\n\ninterface Props {\n  id: string;\n  direction?: string;\n}\n\nconst LinearGradient: React.FC<Props> = React.memo(\n  ({id, direction}) => {\n    const x2 = direction === DIRECTION.horizontal ? 0 : 100;\n    const y2 = direction === DIRECTION.horizontal ? 100 : 0;\n    return (\n      <linearGradient\n        x1=\"0%\"\n        y1=\"0%\"\n        x2={`${x2}%`}\n        y2={`${y2}%`}\n        id={id}\n      >\n        <stop stopColor=\"#FFFFFF\" stopOpacity=\"0\" offset=\"0\"/>\n        <stop stopColor=\"#FFFFFF\" stopOpacity=\"0.3\" offset=\"0.3\"/>\n        <stop stopColor=\"#FFFFFF\" stopOpacity=\"0.6\" offset=\"0.5\"/>\n        <stop stopColor=\"#FFFFFF\" stopOpacity=\"0.3\" offset=\"0.7\"/>\n        <stop stopColor=\"#FFFFFF\" stopOpacity=\"0\" offset=\"1\"/>\n      </linearGradient>\n    );\n  }\n);\n\nexport default LinearGradient;\n","import \"./svg-loader.css\";\n\nimport * as React from \"react\";\nimport * as uuid from \"uuid\";\nimport classnames from \"classnames\";\nimport LinearGradient from \"../linear-gradient\";\nimport { DIRECTION } from \"../constatns\";\n\nexport interface SvgLoaderProps {\n  width: number;\n  height: number;\n  direction?: string;\n  reverse?: boolean;\n  backColor?: string;\n  loaderColor?: string;\n  className?: string;\n}\n\nconst SvgLoader: React.FC<SvgLoaderProps> = React.memo(\n  ({width, height, children, direction, reverse, backColor, loaderColor, className}) => {\n    const idMask = uuid.v4();\n    const idGradient = uuid.v4();\n    return (\n      <svg\n        className={classnames(\"svg-loader\", className)}\n        width={`${width}px`}\n        height={`${height}px`}\n        viewBox={`0 0 ${width} ${height}`}\n        version=\"1.1\"\n      >\n        <defs>\n          <LinearGradient id={idGradient} direction={direction}/>\n          <mask id={idMask}>\n            <rect\n              className={classnames(\"svg-loader__cube\", {\n                \"svg-loader__cube--horizontal\": direction === DIRECTION.horizontal,\n                \"svg-loader__cube--vertical\": direction === DIRECTION.vertical,\n                \"svg-loader__cube--reverse\": reverse\n              })}\n              fill={`url(#${idGradient})`}\n              x=\"0\"\n              y=\"0\"\n              width={`${width}px`}\n              height={`${height}px`}\n            />\n          </mask>\n        </defs>\n        <g fill={backColor}>{children}</g>\n        <g fill={loaderColor} mask={`url(#${idMask})`}>\n          {children}\n        </g>\n      </svg>\n    );\n  }\n);\n\nSvgLoader.defaultProps = {\n  direction: DIRECTION.vertical,\n  reverse: false,\n  backColor: \"#bec3d4\",\n  loaderColor: \"#fff\"\n};\n\n\nexport default SvgLoader;\n","import SvgLoader, {SvgLoaderProps} from \"../components/svg-loader/index\";\nimport React from \"react\";\n\nconst Loader: React.FC<SvgLoaderProps> = React.memo((props) => (\n  <SvgLoader {...props}>\n    <circle cx=\"20\" cy=\"37\" r=\"20\"/>\n    <rect x=\"60\" y=\"0\" width=\"40\" height=\"15\" rx=\"8\" ry=\"8\"/>\n    <rect x=\"60\" y=\"25\" width=\"140\" height=\"20\" rx=\"8\" ry=\"8\"/>\n    <rect x=\"60\" y=\"55\" width=\"100\" height=\"15\" rx=\"8\" ry=\"8\"/>\n    <rect x=\"220\" y=\"0\" width=\"130\" height=\"70\" rx=\"8\" ry=\"8\"/>\n  </SvgLoader>\n  )\n);\n\nexport default Loader;\n","import \"./App.css\";\n\nimport React from \"react\";\nimport Loader from \"./loader\";\nimport { DIRECTION } from \"./components/constatns\";\n\nconst SIZE = {\n  height: 70,\n  width: 350\n};\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__container\">\n      <h1 className=\"App__header\">Example svg loaders</h1>\n      <section className=\"App__section\">\n        <div className=\"App__section-col\">\n          <h2 className=\"App__header\">Loader with vertical direction</h2>\n          <Loader height={SIZE.height} width={SIZE.width} />\n        </div>\n        <div className=\"App__section-col\">\n          <h2 className=\"App__header\">Loader with horizontal direction</h2>\n          <Loader height={SIZE.height} width={SIZE.width} direction={DIRECTION.horizontal} />\n        </div>\n        <div className=\"App__section-col\">\n          <h2 className=\"App__header\">Loader with reverse vertical direction</h2>\n          <Loader height={SIZE.height} width={SIZE.width} direction={DIRECTION.vertical} reverse/>\n        </div>\n        <div className=\"App__section-col\">\n          <h2 className=\"App__header\">Loader with reverse horizontal direction</h2>\n          <Loader height={SIZE.height} width={SIZE.width} direction={DIRECTION.horizontal} reverse />\n        </div>\n      </section>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}